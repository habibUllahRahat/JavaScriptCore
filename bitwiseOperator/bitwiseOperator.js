/*
There are few kind of Bitwise Operator in JavaScript to work with bit
_________________________________________________
|Operator|               Operation              |
=================================================
|  "<<"  |Shifts the bits to left               |
=================================================
|  ">>"  |Shifts the bits to right              |
=====================================================================
|   "~"  |Bitwise inversion/one' compliment and also work as NOt    |
=====================================================================
|   "&"  |Bitwise logical AND                   |
=================================================
|   "|"  |Bitwise logical OR                    |
=================================================
|   "^"  |Bitwise exclusive or (logical XOR)    |
=================================================
*/

/*Shift left
It shift bit to the left 
                   _______________________________________
                   |128| 64 | 32 | 16 |  8 |  4  | 2 | 1 |
                   =======================================
var a = 128 =>     | 1 |  0 | 0  |  0 |  0 |  0  | 0 | 0 |
                   =======================================
var b = a >> 2 =>  | 0 |  0 | 1  |  0 |  0 |  0  | 0 | 0 |=32
                   =======================================
*/
var a = 128;
var b = a >> 2; //it will shift 2 points left every bit 
console.log(b);

/*Shift right
                   _______________________________________
                   |128| 64 | 32 | 16 |  8 |  4  | 2 | 1 |
                   =======================================
var a = 128 =>     | 0 |  0 | 0  |  1 |  0 |  0  | 0 | 0 |
                   =======================================
var b = a << 3 =>  | 0 |  0 | 0  |  0 |  0 |  0  | 0 | 0 |
                   =======================================
*/
var a = 16;
var b = a << 3; //it will shift 3 points right every bit 
console.log(b);

/*Bitwise inversion('~')/ ones conversion

truth table

              ____________________________________________
              |sign|128| 64 | 32 | 16 |  8 |  4  | 2 | 1 |
              ============================================
var a = 37 => |(0)+| 0 |  0 | 1  |  0 |  0 |  1  | 0 | 1 |
              ============================================
var b = ~a => |(1)-| 0 |  0 | 1  |  0 |  0 |  1  | 1 | 0 |
              ============================================

*/
var a = 37;
var b = ~a;
console.log(b);
convertToBinary(b);
/*Bitwise logical AND('&')

truth table
__________________
| Input | Output |
==================
| 1 | 1 |   1    |
==================
| 0 | 1 |   0    |
==================
| 1 | 0 |   0    |
==================
| 0 | 0 |   0    |
==================
                   _______________________________________
                   |128| 64 | 32 | 16 |  8 |  4  | 2 | 1 |
                   =======================================
var a = 37 =>      | 0 |  0 | 1  |  0 |  0 |  1  | 0 | 1 |
                   =======================================
var b = 120 =>     | 0 |  1 | 1  |  1 |  1 |  0  | 0 | 0 |
                   =======================================
var c = a & b =>   | 0 |  0 | 1  |  0 |  0 |  0  | 0 | 0 | = 32
                   =======================================

*/
var a = 37;
var b = 120;
var c = a & b;
console.log(c);
convertToBinary(c);
/*Bitwise logical OR('|')
truth table
__________________
| Input | Output |
==================
| 1 | 1 |   1    |
==================
| 0 | 1 |   1    |
==================
| 1 | 0 |   1    |
==================
| 0 | 0 |   0    |
==================
                   _______________________________________
                   |128| 64 | 32 | 16 |  8 |  4  | 2 | 1 |
                   =======================================
var a = 37 =>      | 0 |  0 | 1  |  0 |  0 |  1  | 0 | 1 |
                   =======================================
var b = 120 =>     | 0 |  1 | 1  |  1 |  1 |  0  | 0 | 0 |
                   =======================================
var c = a | b =>   | 0 |  1 | 1  |  1 |  1 |  1  | 0 | 1 | = 125
                   =======================================

*/

var a = 37;
var b = 120;
var c = a | b;
console.log(c);
convertToBinary(c);

/*Bitwise Exclusive or XOR ('~')
truth table
__________________
| Input | Output |
==================
| 1 | 1 |   0    |
==================
| 0 | 1 |   1    |
==================
| 1 | 0 |   1    |
==================
| 0 | 0 |   0    |
==================
                   _______________________________________
                   |128| 64 | 32 | 16 |  8 |  4  | 2 | 1 |
                   =======================================
var a = 37 =>      | 0 |  0 | 1  |  0 |  0 |  1  | 0 | 1 |
                   =======================================
var b = 120 =>     | 0 |  1 | 1  |  1 |  1 |  0  | 0 | 0 |
                   =======================================
var c = a ^ b =>   | 0 |  1 | 0  |  1 |  1 |  1  | 0 | 1 | = 93
                   =======================================

*/
var a = 37;
var b = 120;
var c = a ^ b;
console.log(c);
convertToBinary(c);




//a fuction for convert decimal into binary
function convertToBinary(x) {
    let bin = 0;
    let rem, i = 1,
        step = 1;
    while (x != 0) {
        rem = x % 2;
        console.log(
            `Step ${step++}: ${x}/2, Remainder = ${rem}, Quotient = ${parseInt(x/2)}`
        );
        x = parseInt(x / 2);
        bin = bin + rem * i;
        i = i * 10;
    }
    console.log(`Binary: ${bin}`);
}